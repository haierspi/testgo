///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package purchasehub_supplier_order_real_details_repo

import (
	"fmt"
	"time"

	"go_service/repository/db_repo"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *PurchasehubSupplierOrderRealDetails {
	return new(PurchasehubSupplierOrderRealDetails)
}

func NewQueryBuilder() *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	return new(purchasehubSupplierOrderRealDetailsRepoQueryBuilder)
}

func (t *PurchasehubSupplierOrderRealDetails) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type purchasehubSupplierOrderRealDetailsRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&PurchasehubSupplierOrderRealDetails{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&PurchasehubSupplierOrderRealDetails{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&PurchasehubSupplierOrderRealDetails{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) First(db *gorm.DB) (*PurchasehubSupplierOrderRealDetails, error) {
	ret := &PurchasehubSupplierOrderRealDetails{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) QueryOne(db *gorm.DB) (*PurchasehubSupplierOrderRealDetails, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) QueryAll(db *gorm.DB) ([]*PurchasehubSupplierOrderRealDetails, error) {
	var ret []*PurchasehubSupplierOrderRealDetails
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) Limit(limit int) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) Offset(offset int) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereId(p db_repo.Predicate, value int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereIdIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereIdNotIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderById(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePhsoid(p db_repo.Predicate, value int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phsoid", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePhsoidIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phsoid", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePhsoidNotIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phsoid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByPhsoid(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "phsoid "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereDetails(p db_repo.Predicate, value string) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "details", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereDetailsIn(value []string) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "details", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereDetailsNotIn(value []string) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "details", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByDetails(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "details "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereSkuCount(p db_repo.Predicate, value int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sku_count", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereSkuCountIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sku_count", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereSkuCountNotIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sku_count", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderBySkuCount(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "sku_count "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereGoodsCount(p db_repo.Predicate, value int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_count", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereGoodsCountIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_count", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereGoodsCountNotIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_count", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByGoodsCount(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "goods_count "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePurchaseQuantity(p db_repo.Predicate, value int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "purchase_quantity", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePurchaseQuantityIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "purchase_quantity", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePurchaseQuantityNotIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "purchase_quantity", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByPurchaseQuantity(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "purchase_quantity "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePurchaseAmount(p db_repo.Predicate, value float64) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "purchase_amount", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePurchaseAmountIn(value []float64) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "purchase_amount", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WherePurchaseAmountNotIn(value []float64) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "purchase_amount", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByPurchaseAmount(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "purchase_amount "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereStatus(p db_repo.Predicate, value int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereStatusIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereStatusNotIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByStatus(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereIsChange(p db_repo.Predicate, value int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_change", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereIsChangeIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_change", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereIsChangeNotIn(value []int32) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_change", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByIsChange(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_change "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereCreatedAt(p db_repo.Predicate, value time.Time) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByCreatedAt(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereUpdatedAt(p db_repo.Predicate, value time.Time) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderRealDetailsRepoQueryBuilder) OrderByUpdatedAt(asc bool) *purchasehubSupplierOrderRealDetailsRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
