///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package purchasehub_supplier_order_flow_repo

import (
	"fmt"
	"time"

	"go_service/repository/db_repo"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *PurchasehubSupplierOrderFlow {
	return new(PurchasehubSupplierOrderFlow)
}

func NewQueryBuilder() *purchasehubSupplierOrderFlowRepoQueryBuilder {
	return new(purchasehubSupplierOrderFlowRepoQueryBuilder)
}

func (t *PurchasehubSupplierOrderFlow) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type purchasehubSupplierOrderFlowRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&PurchasehubSupplierOrderFlow{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&PurchasehubSupplierOrderFlow{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&PurchasehubSupplierOrderFlow{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) First(db *gorm.DB) (*PurchasehubSupplierOrderFlow, error) {
	ret := &PurchasehubSupplierOrderFlow{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) QueryOne(db *gorm.DB) (*PurchasehubSupplierOrderFlow, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) QueryAll(db *gorm.DB) ([]*PurchasehubSupplierOrderFlow, error) {
	var ret []*PurchasehubSupplierOrderFlow
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) Limit(limit int) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) Offset(offset int) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereId(p db_repo.Predicate, value int32) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereIdIn(value []int32) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereIdNotIn(value []int32) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderById(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereErpBillnumber(p db_repo.Predicate, value string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "erp_billnumber", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereErpBillnumberIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "erp_billnumber", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereErpBillnumberNotIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "erp_billnumber", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByErpBillnumber(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "erp_billnumber "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereName(p db_repo.Predicate, value string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereNameIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereNameNotIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByName(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereOperate(p db_repo.Predicate, value string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "operate", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereOperateIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "operate", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereOperateNotIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "operate", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByOperate(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "operate "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereOperateId(p db_repo.Predicate, value string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "operate_id", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereOperateIdIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "operate_id", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereOperateIdNotIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "operate_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByOperateId(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "operate_id "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereNote(p db_repo.Predicate, value string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereNoteIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereNoteNotIn(value []string) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByNote(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "note "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereStartTime(p db_repo.Predicate, value time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "start_time", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereStartTimeIn(value []time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "start_time", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereStartTimeNotIn(value []time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "start_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByStartTime(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "start_time "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereEndTime(p db_repo.Predicate, value time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "end_time", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereEndTimeIn(value []time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "end_time", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereEndTimeNotIn(value []time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "end_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByEndTime(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "end_time "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereCreatedAt(p db_repo.Predicate, value time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByCreatedAt(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereUpdatedAt(p db_repo.Predicate, value time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *purchasehubSupplierOrderFlowRepoQueryBuilder) OrderByUpdatedAt(asc bool) *purchasehubSupplierOrderFlowRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
